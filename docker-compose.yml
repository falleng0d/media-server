networks:
  mediarr:
    driver: bridge
  transmission:
    name: transmission
    external: true

volumes:
  media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MEDIA_DRIVE}
  animes:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MEDIA_DRIVE}/Animes
  movies:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MEDIA_DRIVE}/Movies

services:
  jellyfin:
    image: jellyfin/jellyfin
    pull_policy: always
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
      - JELLYFIN_CACHE_DIR=/var/cache/jellyfin
      - JELLYFIN_CONFIG_DIR=/etc/jellyfin
      - JELLYFIN_DATA_DIR=/var/lib/jellyfin
      - JELLYFIN_LOG_DIR=/var/log/jellyfin
    ports:
      - 6565:8080
    networks:
      - mediarr
    volumes:
      - ${CONFIG_DIR}/jellyfin/etc:/etc/jellyfin
      - ${CONFIG_DIR}/jellyfin/var-cache:/var/cache/jellyfin
      - ${CONFIG_DIR}/jellyfin/var-lib:/var/lib/jellyfin
      - ${CONFIG_DIR}/jellyfin/var-log:/var/log/jellyfin
      - media:/mnt/media
    restart: unless-stopped
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    pull_policy: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    ports:
      - 6767:6767
    networks:
      - mediarr
    volumes:
      - ${CONFIG_DIR}/bazarr:/config
      - media:/data/
    depends_on:
      - sonarr
      - radarr
    restart: unless-stopped
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    pull_policy: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    ports:
      - 5055:5055
    networks:
      - mediarr
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ${CONFIG_DIR}/jellyseerr:/app/config
      - media:/data/
    depends_on:
      - sonarr
      - radarr
    restart: unless-stopped
  prowlarr:
    image: linuxserver/prowlarr:latest
    pull_policy: always
    ports:
      - 9696:9696
    networks:
      - mediarr
    volumes:
      - ${CONFIG_DIR}/prowlarr:/config
    depends_on:
      - flaresolverr
    restart: unless-stopped
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    pull_policy: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
      - AUTO_UPDATE=true
      - RUN_OPTS=
    ports:
      - 9117:9117
    networks:
      - mediarr
    volumes:
      - ${CONFIG_DIR}/jackett:/config
      - media:/data/
    restart: unless-stopped
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    pull_policy: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
    networks:
      - mediarr
    restart: unless-stopped
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    pull_policy: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    ports:
      - 7878:7878
    networks:
      - mediarr
      - transmission
    volumes:
      - ${CONFIG_DIR}/radarr:/config
      - media:/data/
    depends_on:
      - prowlarr
      - jackett
      - jellyfin
    restart: unless-stopped
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    pull_policy: always
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    ports:
      - 8989:8989
    networks:
      - mediarr
      - transmission
    volumes:
      - ${CONFIG_DIR}/sonarr:/config
      - media:/data/
    depends_on:
      - prowlarr
      - jackett
      - jellyfin
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.docker.network: dokploy-network
      traefik.http.routers.media-server-sonarr-web.entrypoints: web
      traefik.http.routers.media-server-sonarr-web.middlewares: redirect-to-https@file
      traefik.http.routers.media-server-sonarr-web.rule: Host(`${SONARR_HOST}`)
      traefik.http.routers.media-server-sonarr-web.service: media-server-sonarr-web
      traefik.http.routers.media-server-sonarr-websecure.middlewares: local-network-ipallowlist@file
      traefik.http.routers.media-server-sonarr-websecure.entrypoints: websecure
      traefik.http.routers.media-server-sonarr-websecure.rule: Host(`${SONARR_HOST}`)
      traefik.http.routers.media-server-sonarr-websecure.service: media-server-sonarr-websecure
      traefik.http.routers.media-server-sonarr-websecure.tls.certresolver: dns-cloudflare
      traefik.http.services.media-server-sonarr-web.loadbalancer.server.port: 8989
      traefik.http.services.media-server-sonarr-websecure.loadbalancer.server.port: 8989
  shoko:
    image: ghcr.io/shokoanime/server:latest
    pull_policy: always
    shm_size: 256m
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
    ports:
      - 8111:8111
    networks:
      - mediarr
    volumes:
      - ${CONFIG_DIR}/shoko:/home/shoko/.shoko
      - animes:/mnt/anime
      - media:/mnt/import
    restart: unless-stopped
  homarr:
    container_name: homarr
    image: ghcr.io/homarr-labs/homarr:latest
    pull_policy: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TZ}
      - SECRET_ENCRYPTION_KEY=${SECRET_ENCRYPTION_KEY}
    ports:
      - 7575:7575
    networks:
      - mediarr
      - transmission
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_DIR}/homarr/appdata:/appdata
    restart: unless-stopped
